{"ast":null,"code":"import { REMOVE_ITEM, ADD_TO_CART, INCREASE, DECREASE, CHECKOUT, CLEAR } from \"./CartTypes.js\";\n\n// Save the cartItems to local storage\nconst Storage = cartItems => {\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems.length > 0 ? cartItems : []));\n};\n\n// Export function to calculate the total price of the cart and the total quantity of the cart\n_c = Storage;\nexport const sumItems = cartItems => {\n  Storage(cartItems);\n  let itemCount = cartItems.reduce((total, product) => total + product.quantity, 0);\n  let total = cartItems.reduce((total, product) => total + product.price * product.quantity, 0).toFixed(2);\n  return {\n    itemCount,\n    total\n  };\n};\n\n// The reducer is listening for an action, which is the type that we defined in the CartTypes.js file\nconst CartReducer = (state, action) => {\n  // The switch statement is checking the type of action that is being passed in\n  switch (action.type) {\n    // If the action type is ADD_TO_CART, we want to add the item to the cartItems array\n    case ADD_TO_CART:\n      if (!state.cartItems.find(item => item.id === action.payload.id)) {\n        state.cartItems.push({\n          ...action.payload,\n          quantity: 1\n        });\n      }\n      return {\n        ...state,\n        ...sumItems(state.cartItems),\n        cartItems: [...state.cartItems]\n      };\n\n    // If the action type is REMOVE_ITEM, we want to remove the item from the cartItems array\n    case REMOVE_ITEM:\n      return {\n        ...state,\n        ...sumItems(state.cartItems.filter(item => item.id !== action.payload.id)),\n        cartItems: [...state.cartItems.filter(item => item.id !== action.payload.id)]\n      };\n\n    // If the action type is INCREASE, we want to increase the quantity of the particular item in the cartItems array\n    case INCREASE:\n      state.cartItems[state.cartItems.findIndex(item => item.id === action.payload.id)].quantity++;\n      return {\n        ...state,\n        ...sumItems(state.cartItems),\n        cartItems: [...state.cartItems]\n      };\n\n    // If the action type is DECREASE, we want to decrease the quantity of the particular item in the cartItems array\n    case DECREASE:\n      state.cartItems[state.cartItems.findIndex(item => item.id === action.payload.id)].quantity--;\n      return {\n        ...state,\n        ...sumItems(state.cartItems),\n        cartItems: [...state.cartItems]\n      };\n\n    // If the action type is CHECKOUT, we want to clear the cartItems array and set the checkout to true\n    case CHECKOUT:\n      return {\n        cartItems: [],\n        checkout: true,\n        ...sumItems([])\n      };\n\n    //If the action type is CLEAR, we want to clear the cartItems array\n    case CLEAR:\n      return {\n        cartItems: [],\n        ...sumItems([])\n      };\n\n    //Return the state if the action type is not found\n    default:\n      return state;\n  }\n};\n_c2 = CartReducer;\nexport default CartReducer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Storage\");\n$RefreshReg$(_c2, \"CartReducer\");","map":{"version":3,"names":["REMOVE_ITEM","ADD_TO_CART","INCREASE","DECREASE","CHECKOUT","CLEAR","Storage","cartItems","localStorage","setItem","JSON","stringify","length","_c","sumItems","itemCount","reduce","total","product","quantity","price","toFixed","CartReducer","state","action","type","find","item","id","payload","push","filter","findIndex","checkout","_c2","$RefreshReg$"],"sources":["/Users/mac/Desktop/Product-Listing-App/src/context/Cart/CartReducer.js"],"sourcesContent":["import {\n  REMOVE_ITEM,\n  ADD_TO_CART,\n  INCREASE,\n  DECREASE,\n  CHECKOUT,\n  CLEAR,\n} from \"./CartTypes.js\";\n\n// Save the cartItems to local storage\nconst Storage = (cartItems) => {\n  localStorage.setItem(\n    \"cartItems\",\n    JSON.stringify(cartItems.length > 0 ? cartItems : [])\n  );\n};\n\n// Export function to calculate the total price of the cart and the total quantity of the cart\nexport const sumItems = (cartItems) => {\n  Storage(cartItems);\n  let itemCount = cartItems.reduce(\n    (total, product) => total + product.quantity,\n    0\n  );\n  let total = cartItems\n    .reduce((total, product) => total + product.price * product.quantity, 0)\n    .toFixed(2);\n  return { itemCount, total };\n};\n\n// The reducer is listening for an action, which is the type that we defined in the CartTypes.js file\nconst CartReducer = (state, action) => {\n  // The switch statement is checking the type of action that is being passed in\n  switch (action.type) {\n    // If the action type is ADD_TO_CART, we want to add the item to the cartItems array\n    case ADD_TO_CART:\n      if (!state.cartItems.find((item) => item.id === action.payload.id)) {\n        state.cartItems.push({\n          ...action.payload,\n          quantity: 1,\n        });\n      }\n\n      return {\n        ...state,\n        ...sumItems(state.cartItems),\n        cartItems: [...state.cartItems],\n      };\n\n    // If the action type is REMOVE_ITEM, we want to remove the item from the cartItems array\n    case REMOVE_ITEM:\n      return {\n        ...state,\n        ...sumItems(\n          state.cartItems.filter((item) => item.id !== action.payload.id)\n        ),\n        cartItems: [\n          ...state.cartItems.filter((item) => item.id !== action.payload.id),\n        ],\n      };\n\n    // If the action type is INCREASE, we want to increase the quantity of the particular item in the cartItems array\n    case INCREASE:\n      state.cartItems[\n        state.cartItems.findIndex((item) => item.id === action.payload.id)\n      ].quantity++;\n      return {\n        ...state,\n        ...sumItems(state.cartItems),\n        cartItems: [...state.cartItems],\n      };\n\n    // If the action type is DECREASE, we want to decrease the quantity of the particular item in the cartItems array\n    case DECREASE:\n      state.cartItems[\n        state.cartItems.findIndex((item) => item.id === action.payload.id)\n      ].quantity--;\n      return {\n        ...state,\n        ...sumItems(state.cartItems),\n        cartItems: [...state.cartItems],\n      };\n\n    // If the action type is CHECKOUT, we want to clear the cartItems array and set the checkout to true\n    case CHECKOUT:\n      return {\n        cartItems: [],\n        checkout: true,\n        ...sumItems([]),\n      };\n\n    //If the action type is CLEAR, we want to clear the cartItems array\n    case CLEAR:\n      return {\n        cartItems: [],\n        ...sumItems([]),\n      };\n\n    //Return the state if the action type is not found\n    default:\n      return state;\n  }\n};\n\nexport default CartReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}